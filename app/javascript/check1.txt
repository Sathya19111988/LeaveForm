1.

Which annotation used to execute a method before each test.

A. @BeforeTest
B. @Before
C. @BeforeClass
D. None of the above

Ans: B

-------------------------------------------------------------------

2.


Which annotation used to execute a method after each test.

A. @AfterTest
B. @AfterMethod
C. @AfterClass
D. None of the above

Ans: D

-------------------------------------------------------------------

3. 

import org.junit.Test;
import static org.junit.Assert.assertEquals;
public class TestJunit {
 @Test
 public void testAdd() {
	String str= "Junit is working fine";
	assertEquals("Junit is working fine",str);
 }
}

What happen if the class is executed as junit testcase?

A. Compilation fails
B. success testcase
C. Runtime exception
D. failure testcase

Ans: B
---------------------------------------------------------------------

4.

import org.junit.*;
public class TestJunit {
 @Test
 public void add() {
	System.out.println("add method executed");
 }
 
 @Before
 public void printString() {
	System.out.println("printString method called");
 }
 
 public void setUp() {
	System.out.println("setUp method called");
 }
}

What is printed in the console if the class is executed?

A.  setUp method called
	printString method called
	add method executed
	
B.  add method executed
	setUp method called
	printString method called
	
C.  printString method called
	add method executed

D.  printString method called
	add method executed
	setUp method called
	
Ans: C
--------------------------------------------------------------------
	
5.


import org.junit.*;
public class TestJunit {
 @Test
 public void add() {
	System.out.println("add method executed");
 }
 
 @After
 public void printString() {
	System.out.println("printString method called");
 }
 
 public void tearDown() {
	System.out.println("tearDown method called");
 }
}

What is printed in the console if the class is executed?

A.  tearDown method called
	printString method called
	add method executed
	
B.  add method executed
	tearDown method called
	printString method called
	
C.  add method executed
	printString method called
	tearDown method called

D.  add method executed
	printString method called

Ans: D

------------------------------------------------------------

6. 

import org.junit.*;
public class TestJunit {
 @TestSuite
 public void add() {
	System.out.println("add method executed");
 }
 
 @AfterClass
 public static void printString() {
	System.out.println("printString method called");
 }
 
 public void tearDown() {
	System.out.println("tearDown method called");
 }
}

What is printed in the console if the class is executed?

A. add method executed
   printString method called
   
B. Compilation fails

C. add method executed
   printString method called
   tearDown method called

D. Runtime Exception

Ans: B

-------------------------------------------------------------------

7.

Which annotation used to execute a method once, before the start of all tests

A. @BeforeTest
B. @Before
C. @BeforeClass
D. None of the above

Ans: A

--------------------------------------------------------------------

8.


Which annotation used to execute a method once, after all tests have been finished

A. @AfterTest
B. @AfterMethod
C. @AfterClass
D. None of the above

Ans: C

-------------------------------------------------------------------------

9.

import org.junit.*;
public class TestJunit {
 @Test
 public void add() {
	assertEquals("OFS","OFS");
 }
 
 @Test(timeout=100)
 public void add() {
    int i = 1;
	do {
		System.out.println(i);
	}while(i>0);
 }
 
 @Before
 public void printString() {
	System.out.println("printString method called");
 }
 
 public void tearDown() {
	System.out.println("tearDown method called");
 }
}

What happen if the class is executed as junit testcase?

A. Compilation fails
B. success testcase
C. Runtime exception
D. failure testcase

Ans: D

------------------------------------------------------------------------

10.

Which annotation is used to avoid the testcase to be executed?

A. Avoid
B. Neglect
C. Ignore
D. Skip

Ans: C

--------------------------------------------------------------------------

11.

Which annotation fails the test case if the test case does not throw the named exception?

A. @Test (expected = Exception.class)
B. @Test(timeout=100)
C. @Test
D. None of the above

Ans: A
----------------------------------------------------------------------------

12. 

Which annotation fails the test case if the test case is not executed in the specified time?

A. @Test (expected = Exception.class)
B. @TestTimeOut
C. @Test
D. None of the above

Ans: D

---------------------------------------------------------------------------

13. 

In what order the test cases are executed?

A. From the top to the bottom of the class
B. From the bottom to the top of the class
C. In an arbitrary order
D. Based on the time of the execution it varies
	
Ans : C

----------------------------------------------------------------------------

14.

Which annotation used to identifies a method as a testmethod?

A. assertTrue
B. @Test
C. @ConvertMethodToTestCase
D. All the above

Ans : B

---------------------------------------------------------------------------

15.

In which version of junit supports the @Test annotation?

A. 3.x
B. 4.x
C. 2.x
D. All the above

Ans: B

----------------------------------------------------------------------------

16.

Which is the correct way of declaring the @BeforeClass annotation?
 
A. @BeforeClass
   public static void method()


B. @BeforeClass
   public void method()
    
C. @BeforeClass
   public abstract method()
   
D. @BeforeClass
   public final method()
   
Ans: A

-----------------------------------------------------------------------------

17.

What happens If a Junit test method is declared to return "String"?

A. Compilation fails
B. Test method will be executed without issues
C. Compile fine but the execution will fail
D. None of the above

Ans: C

-----------------------------------------------------------------------------

18.

import org.junit.*;
public class TestJunit {
 @Test
 public void add() {
	assertEquals("OFS","OFS");
	fail("");
 }	
}

What happens if the junit test method is executed?

A. Test Case will be executed fine
B. Test Case fails
C. Compilation fails
D. assertEquals fails

Ans: B

-------------------------------------------------------------------------------

19.

Which annotation fails the test case if the given object is null?

A. fail(object)
B. assertNull([message], object)
C. failsIfNull(object)
D. assertNotNull([message], object)
E. All of the above

Ans: D

------------------------------------------------------------------------------

20. 

Which annotation fails the test case if the given object is not null?

A. fail(object)
B. assertNull([message], object)
C. failsIfNotNull(object)
D. assertNotNull([message], object)
E. None of the above

Ans: B

---------------------------------------------------------------------------------

21.

Which annotation passes the test case if the given condition is true?

A. assertFalse([message], boolean condition)
B. assertSame([String], boolean condition)
C. assertTrue([message], boolean condition)
D. assertPass(boolean condition)
E. None of the above

Ans: C

-------------------------------------------------------------------------------

22. Which annotation passes the test case if the given condition is false?

A. assertFalse([message], boolean condition)
B. assertSame([String], boolean condition)
C. assertTrue([message], boolean condition)
D. assertFails(boolean condition)
E. All of the above

Ans: A

----------------------------------------------------------------------------------

23. 

Which is/are the correct declaration of the assertEquals annotation?

A. assertEquals(Integer ,expected, actual)
B. assertEquals(expected, [String message])
C. assertEquals([String message], expected, actual)
D. assertEquals([String message], expected, actual, tolerance)
E. None of the above

Ans: C,D

-------------------------------------------------------------------------------------

24. 

Which is/are the correct declaration of the assertSame annotation?

A. assertSame(tolerance, expected, actual)
B. assertSame([String], expected, actual)
C. assertSame(expected, actual, [String message])
D. assertSame([String], expected, actual, tolerance)
E. None of the above

Ans: B

--------------------------------------------------------------------------------------

25. 

Which is/are the correct declaration of the assertNotSame annotation?

A. assertNotSame(tolerance, expected, actual)
B. assertNotSame([String], expected, actual)
C. assertNotSame(expected, actual, [String message])
D. assertNotSame([String], expected, actual, tolerance)
E. None of the above

Ans: B

---------------------------------------------------------------------------------------

26.

In what order the test classes are executed in the test suite?

A. In the specified order
B. Random order
C. In an arbitrary order
D. Based on the time of the execution it varies

Ans : A

-----------------------------------------------------------------------------------------

27.


import org.junit.*; 

public class HelloTest { 
    @Test 
    public void testHello() {
        String message = "Hello World!";
        Assert.assertEquals(12, message.length());
    }
}	

What happens if the junit test method is executed?

A. Test Case will be executed fine
B. Compilation fails
C. Test case fails
D. Compiles fine but throws an error in runtime

Ans: A

-------------------------------------------------------------------------------------------

28.

Which is the correct syntax of junit test suite?

A. @RunWith(Suite.class)
   @SuiteClasses({ MyClassTest.java, MySecondClassTest.java })
   public class AllTests { }

B. @RunWith(Suite.java)
   @SuiteClasses({ MyClassTest.java, MySecondClassTest.java })
   public class AllTests { }

C. @RunWith(Suite.class)
   @SuiteClasses({ MyClassTest.class, MySecondClassTest.class })
   public class AllTests {   

D. All the above

Ans: C

----------------------------------------------------------------------------------------------

29.

import org.junit.*; 

public class MyTestClass {
    @Test
    public void myTestMethod() {
       org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
    }
 }

What happens if the junit test method is executed?

A. Test Case will be executed fine
B. Compilation fails
C. Test case fails
D. Compiles fine but throws an error in runtime

Ans: A

---------------------------------------------------------------------------------------------

30.

import org.junit.*; 

public class MyTestClass {
    @Ignore
    @Test
    public void myTestMethod() {
       org.junit.Assert.assertTrue( new ArrayList().isEmpty() );
    }
 }

Which is the appropriate answer?

A. @Ignore annotation is used so the TestMethod testcase will be ignored
B. @Ignore is not an junit annotaion 
C. @Test annotation is used with @Ignore annotation and the @Test annotation is used as second so this test case will be executed fine
D. Two junit annotation is not allowed in a single test case

Ans: A

------------------------------------------------------------------------------------------------

31.

If the assertion fails which type of exception will be thrown?

A. Compilation Error
B. RuntimeException
C. FailureException
D. AssertionException

Ans: D

-----------------------------------------------------------------------------------------------

32...

import org.junit.*; 

public class MyTestClass {
    @Before
    @BeforeClass
    public static void myTestMethod() {
       System.out.println("myTestMethod executed");
    }

    @Test
    public void myTestCase() {
	System.out.println("Test case executed");
    }
	
 }

What happens if the junit test method is executed?

A. myTestMethod executed
   Test case executed
B. Test case executed 
C. Compilation fails
D. Runtime Exception

Ans: D 

------------------------------------------------------------------------------------------------

33. 

import org.junit.*; 

public class MyTestClass {
    
    @BeforeClass
    public static void myTestMethod() {
       System.out.println("myTestMethod executed");
    }

    @Test
    public void myTestCase() {
	System.out.println("Test case executed");
    }
	
 }

What is the console output?

A. myTestMethod executed
   Test case executed
B. Test case executed 
C. Compilation fails
D. Runtime Exception

Ans: A

-------------------------------------------------------------------------------------------------

34.

import org.junit.*; 

public class MyTestClass {
    
    @AfterClass
    public static void myTestMethod() {
       System.out.println("myTestMethod executed");
    }

    @Test
    public void myTestCase() {
	System.out.println("Test case executed");
    }


    @Test
    public void myTestCaseTwo() {
	System.out.println("Test case Two executed");
    }
	
 }

What is/are the possible console output(s)?

A.myTestMethod executed
  Test case executed
  Test case Two executed

B.Test case executed
  Test case Two executed
  myTestMethod executed

C.Test case Two executed
  Test case executed
  myTestMethod executed

D.Test case executed
  myTestMethod executed
  Test case Two executed

Ans: B, C

--------------------------------------------------------------------------------------------------

35.

import org.junit.*; 

public class MyTestClass {
    
    @AfterClass
    public static void myTestMethod() {
       System.out.print("A ");
    }

    @Before
    public void myTestMethodTwo() {
       System.out.print("B ");
    }

    @Test
    public void myTestCase() {
	System.out.print("T ");
    }


    @Test
    public void myTestCaseTwo() {
	System.out.print("T2 ");
    }
	
}
  
What is/are the possible console output(s)?

A. B T T2 A 

B. B T A B T2 A 
C. B T B T2 A 
D. B T2 T A 

Ans: C

-----------------------------------------------------------------------------------------------------

36.

import org.junit.*; 

public class MyTestClass {
    
    @AfterClass
    public static void myTestMethod() {
       System.out.print("A ");
    }

    @Before
    public void myTestMethodTwo() {
       System.out.print("B ");
    }

    @Test(timeout=100)
    public void myTestCase() {
	System.out.print("T ");
    }


    @Test(expected=ArithmeticException.class)
    public void myTestCaseTwo() {
	System.out.print(1/0);
    }
	
}
  
What is/are the possible console output(s)?

A. Test cases fails and there is no output in the console
B. B T A 
C. Throws an AssertionException
D. B A T 

Ans : B

-----------------------------------------------------------------------------------------------------

37.

import org.junit.*; 
import static org.junit.Assert.*;

public class MyTestClass {
    
    @AfterClass
    public static void myTestMethod() {
       System.out.print("A ");
    }

    @Before
    @Ignore
    public void myTestMethodTwo() {
       assertEquals("10 x 5 must be 50", 50, 10*5.1);
    }

    @Test(timeout=100)
    public void myTestCase() {
	System.out.print("T ");
    }


    @Test(expected=ArithmeticException.class)
    public void myTestCaseTwo() {
	System.out.print(1/0);
    }
	
}
 
What is/are the possible console output(s)?

A. Test cases fails and there is no output in the console
B. T B A 
C. Throws an AssertionException
D. T A 

Ans : D

--------------------------------------------------------------------------------------------------------

38.

import org.junit.*; 

public class MyTestClass {
    
    @BeforeClass
    public static void myTestMethod() {
       System.out.print("A ");
    }

    @After
    public void myTestMethodTwo() {
       System.out.print("B ");
    }

    @Test(timeout=100)
    public void myTestCase() {
	System.out.print("T ");
    }


    @Test(expected=ArithmeticException.class)
    public void myTestCaseTwo() {
	System.out.print(1/0);
    }
	
}
  
What is/are the possible console output(s)?

A. A B T 
B. A T B 
C. T A B 
D. Throws an AssertionException

Ans: B

---------------------------------------------------------------------------------------------------------

39. 

import org.junit.*; 

public class MyTestClass {
    
    @Test
    public void myTestMethod() {
       System.out.print("A ");
    }

    @Test
    public void myTestMethodTwo() {
       System.out.print("B ");
    }

    @Test(timeout=100)
    public void myTestCase() {
	System.out.print("T ");
    }


    @Test(expected=ArithmeticException.class)
    public void myTestCaseTwo() {
	System.out.print(1/0);
	Syste.out.print("T2 ");
    }
}

What is/are the possible console output(s)?

A. A B T T2 
B. A T B T2
C. A T2 T B
D. None of the above

Ans: D
-----------------------------------------------------------------------------------------------------------

40.

import org.junit.*; 

public class MyTestClass {
    
    @Test
    public void myTestMethod() {
       System.out.print("A ");
    }

    @Test
    public void myTestMethodTwo() {
       System.out.print("B ");
    }

    @Test(timeout=100)
    public void myTestCase() {
	System.out.print("T ");
    }


    @Test(expected=ArithmeticException.class)
    public void myTestCaseTwo() {
	System.out.print("T2 ");
    }
}

What is/are the possible console output(s)?

A. A B T T2 
B. A T B T2
C. B T2 T A
D. None of the above

Ans: A, B, C

-------------------------------------------------------------------------------------------------------------

41. What is the unit of the timeout in the @Test(timeout=100) annotation?

A. seconds
B. micro seconds
C. unit seconds
D. milli seconds

Ans: D

-------------------------------------------------------------------------------------------------------------

42.

import org.junit.*; 

public class MyTestClass {
    
    @Before
    public void myTestMethod() {
       System.out.print(“B ");
    }

    @BeforeClass
    public static void myTestMethodTwo() {
       System.out.print(“BC ");
    }

    @After
    public void myTestCase() {
	System.out.print(“A ");
    }


    @AfterClass
    public static void myTestCaseTwo() {
	System.out.print(“AC ");
    }
}

What is the console output?

A. B BC A AC
B. B BC AC A
C. BC B A AC
D. BC B AC A

Ans: C

-------------------------------------------------------------------------------------------------------------

43. 

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {

    @Before
    public void beforeTest() {
       int a = 5;
    }

    @Test
    public void testMethod() {
	assertEquals(a, 5);
    }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: A

-------------------------------------------------------------------------------------------------------------


44. 

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   String name;
   
   @Before
   public void beforeTest() {
       String name = “OFS”;
   }
   
   @Test
   public void method() {
	assertNull(name);
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: D

-------------------------------------------------------------------------------------------------------------

45.


import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   String name;
   
   @After
   public void beforeTest() {
       name = “OFS”;
   }
   
   @Test
   public void method() {
	assertNotNull(name);
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: C

-------------------------------------------------------------------------------------------------------------

46.

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private String name;
   private StringBuffer sb;
   
   @Before
   public void beforeTest() {
       name = “OFS”;
   }

   @BeforeClass
   public static void beforeClassMethod() {
       sb = new StringBuffer(“OFS”);
   }
   
   @Test
   public void method() {
	assertSame(“Error Message”, name, sb);
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: C

-------------------------------------------------------------------------------------------------------------

47.

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private Integer[] num;
   private Integer[] nums;

   @BeforeClass
   public static void beforeClassMethod() {
       num = {1,2,3,4};
       nums = {1,2,3,4};
   }
   
   @Test
   public void method() {
	assertEquals(“Error Message”, num, mums);
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: C

-------------------------------------------------------------------------------------------------------------

48.

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private Integer[] num;

   @AfterClass
   public static void afterClassMethod() {
       num = {1,2,3,4};
   }
   
   @Test
   public void method() {
	if(num.size() == 4) {
	  fails(“”);
	}
	
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: B

-------------------------------------------------------------------------------------------------------------

49.

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private String name = “OFS”;
   
   @Test
   public void method() {
	assertTrue(“”, name, “OFS”);
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: D

-------------------------------------------------------------------------------------------------------------

50.

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private String[] name = new String[];
   
   @Before
   public void beforeTest() {
       name = {“OFS”,”JUNIT”,”JAVA”,”JUNIT”};
   }

   @Test
   public void method() {
	assertSame(“”, name[2], “Java”);
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: A


-------------------------------------------------------------------------------------------------------------

51.

import org.junit.*; 
import junit.framework.Assert.*;
import java.util.HashSet;
import java.util.Set;

public class MyTestClass {
   private Set<String> set;
   
   @Before
   public void beforeTest() {
       set = new HashSet<String> ();
       set.add(“A”);
       set.add(“B”);
       set.add(“A”);	
       set.add(“A”);	
       set.add(“C”);
   }

   @Test
   public void method() {
	if (set.size() == 5) {
	    fails(“”);
	}
   }
}

What is the result of the test case?

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: D

-------------------------------------------------------------------------------------------------------------

52.

In Junit 4.x version which annotation is used instead of the setUp method?

A. @Before
B. @BeforeClass
C. @After
D. @AfterClass

Ans: A

-------------------------------------------------------------------------------------------------------------

53.

In Junit 4.x version which annotation is used instead of the tearDown method?

A. @Before
B. @BeforeClass
C. @After
D. @AfterClass

Ans: C

-------------------------------------------------------------------------------------------------------------

54. 

Which is the correct way of defining the test method name for the @Test annotation?

A.@Test 
  public void testAdd() {}
B. @Test
  public void add() {}
C. @Test
  public void methodName() {}
D. All the above

-------------------------------------------------------------------------------------------------------------

55. 

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private List<String> names = new ArrayList<String> ();

   @BeforeClass
   public void beforeTestTwo() {
       name = {“OFS”,”JUNIT”,”JAVA”,”JUNIT”};
       names.add(“OFS”);
       names.add(“JAVA”);
       names.add(“OFS”);
       names.add(“JUNIT”);
   }

   @Test
   public void method() {
	assertSame(“”, name.get(3), “JUNIT”);
   }
}

A. Compilation Error
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: A

-------------------------------------------------------------------------------------------------------------

56.

import org.junit.*; 
import junit.framework.Assert.*;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;
import org.junit.runner.RunWith;

@RunWith(Parameterized.class)
public class MyTestClass {
   private Integer inputNumber;

   public MyTestClass(Integer inputNumber) {
      this.inputNumber = inputNumber;
   }

   @Parameterized.Parameters
   public static Collection primeNumbers() {
      return Arrays.asList(new Object[] {
         { 2 },
         { 6 },
         { 19 },
         { 22 },
         { 23 }
      });
   }

   @Test
   public void testPrimeNumberChecker() {
      System.out.print(inputNumber + “ ”);
   }
}

What is the result printed in the console?

A. 26192223
B. 2 6 19 22 23 
C. 5
D. 23

Ans: B

-------------------------------------------------------------------------------------------------------------

57.

Which feature used to run the same test over and over again using different values? 

A. RunWith
B. RunAgain
C. Parameterized tests
D. JunitCollectionLoopAgain Tests

Ans: C

-------------------------------------------------------------------------------------------------------------

58.

import org.junit.*; 
import junit.framework.Assert.*;

public class MyTestClass {
   private Integer[] num;
   private Integer[] nums;

   @BeforeClass
   public static void beforeClassMethod() {
       num = {1,2,3,4};
       nums = {1,2,3,4};
   }
   
   @Test
   public void method() {
       assertArrayEquals(num, nums);
   }
}

What is the result of the test case?

A. Compilation Error because assertArrayEquals is not an Junit method
B. Runtime Error
C. TestCase fails
D. TestCase will give success output

Ans: D

-------------------------------------------------------------------------------------------------------------

59.

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

public class ExecutionProcedureJunit {
	 
   @BeforeClass
   public static void beforeClass() {
      System.out.println("in before class");
   }

   @AfterClass
   public static void  afterClass() {
      System.out.println("in after class");
   }

   @Before
   public void before() {
      System.out.println("in before");
   }

   @After
   public void after() {
      System.out.println("in after");
   }

   @Test
   public void testCase1() {
      System.out.println("in test case 1");
   }

   @Test
   public void testCase2() {
      System.out.println("in test case 2");
   }
}

What is the possible console output?

A. Compilation fails
B. No output in the console
C. in before class
   in before
   in test case 1
   in after
   in before
   in test case 2
   in after
   in after class
D. in before class
   in before
   in test case 1
   in test case 2
   in after
   in before
   in after
   in after class

Ans: C

-------------------------------------------------------------------------------------------------------------

60.

Which version of java should be used to write junit test cases?

A. Java	1.5 or above
B. Java 1.6
C. Java 1.7
D. Any version of Java

Ans: A

-------------------------------------------------------------------------------------------------------------

